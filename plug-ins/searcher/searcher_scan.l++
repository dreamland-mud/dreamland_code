
%option yylineno
%option noyywrap
%option caseless

%{
/* $Id$
 *
 * ruffina, 2019
 */
#include "logstream.h"
#include "wrapperbase.h"
#include "register-impl.h"
#include "lex.h"
#include "grammar_entities_impl.h"
#include "searcher_val.h"    
#include "searcher_parse.h++"
#include "pcharacter.h"
#include "affect.h"
#include "object.h"
#include "autoflags.h"
#include "dl_strings.h"
#include "weapontier.h"
#include "merc.h"
#include "loadsave.h"
#include "def.h"

void searcher_yyerror( const char *txt );
%}

RL	    [йцукенгшщзхъфывапролджэячсмитьбюёЙЦУКЕНГШЩЗХЪФЫВАПРОЛДЖЭЯЧСМИТЬБЮЁ]
L	    ([A-Za-z_]|{RL})

%x QUOTE

%%
	    DLString buf;

\"	    { BEGIN(QUOTE); buf.clear( ); }
<QUOTE>{
\"	    { BEGIN(INITIAL); value->str = buf; return T_STRING; }
\\n	    { buf += '\n';      }
\\r	    { buf += '\r';      }
\\t	    { buf += '\t';      }
\\.	    { buf += yytext[1]; }
.	    { buf += yytext[0]; }
}

-?[0-9]+	    { value->num = atoi( yytext ); return T_INTEGER; }

"OR"	    return T_OR;
"AND"       return T_AND;
"VNUM"      return T_VNUM;
"NAME"      return T_NAME;
"ED"        return T_ED;
"LEVEL"     return T_LVL;
"LVL"       return T_LVL;
"EXTRA"     return T_EXTRA;
"WEAR"      return T_WEAR;
"WEARLOC"   return T_WEAR;
"TYPE"      return T_ITEMTYPE;
"ITEM_TYPE" return T_ITEMTYPE;
"ITEMTYPE"  return T_ITEMTYPE;
"HR"        return T_HR;
"DR"        return T_DR;
"HP"        return T_HP;
"MANA"      return T_MANA;
"MOVE"      return T_MOVE;
"SAVES"     return T_SAVES;
"SVS"       return T_SAVES;
"AC"        return T_ARMOR;
"AGE"       return T_AGE;
"ARMOR"     return T_ARMOR;
"STR"       return T_STR;
"INT"       return T_INT;
"WIS"       return T_WIS;
"DEX"       return T_DEX;
"CON"       return T_CON;
"CHA"       return T_CHA;
"SIZE"      return T_SIZE;
"AFF"       return T_AFF;
"RES"       return T_RES;
"IMM"       return T_IMM;
"VULN"      return T_VULN;
"DET"       return T_DET;
"LIMIT"     return T_LIMIT;
"HGAIN"     return T_HGAIN;
"HEAL_GAIN" return T_HGAIN;
"MGAIN"     return T_MGAIN;
"MANA_GAIN" return T_MGAIN;
"SLEVEL"    return T_SLEVEL;
"WCLASS"    return T_WCLASS;
"WFLAGS"    return T_WFLAGS;
"D1"        return T_D1;
"D2"        return T_D2;
"AVE"       return T_AVE;
"DAMAGE"    return T_DAMAGE;
"FENIA"     return T_FENIA;
"LEARNED"   return T_LEARNED;
"MATERIAL"  return T_MATERIAL;
"FORM"      return T_FORM;
"PARTS"     return T_PARTS;
"ACT"       return T_ACT;
"OFF"       return T_OFF;
"GROUP"     return T_GROUP;
"SPEC"      return T_SPEC;
"ALIGNMENT" return T_ALIGN;
"ALIGN"     return T_ALIGN;
"RACE"      return T_RACE;
"SEX"       return T_SEX;
"NUMBER"    return T_NUMBER;
"RANDOM"    return T_RANDOM;
"TIER"      return T_TIER;


"<="	    return T_LEQ;
">="	    return T_GEQ;
"!="	    return T_NEQ;
[()<>=+\-]    return *yytext;

{L}+	    { value->str = yytext; return T_STRING; }

[ \t]	    ;

.	    searcher_yyerror("Unparsed symbol");

%%

// Create a list of all fenia triggers.
static DLString fenia_triggers(Scripting::Object *wrapper)
{
    WrapperBase *base = get_wrapper(wrapper);
    if (base) {
        StringSet feniaTriggers, feniaMisc;
        base->collectTriggers(feniaTriggers, feniaMisc);
        return feniaTriggers.toString();
    }

    return DLString::emptyString;
}

// Clear all fields between the searches.
void SearcherParam::init()
{
    result = false;

    // Common fields.
    name = "";
    vnum = level = 0;
    hr = dr = hp = mana = move = saves = armor = size = 0;
    str = inta = wis = dex = con = cha = 0;
    heal_gain = mana_gain = 0;
    det = aff = imm = res = vuln = "";
    material = "";
    fenia = "";
    damage = "";

    // Mobile fields.
    pMob = 0;
    form = parts = "";
    act = off = "";
    group = 0;
    spec = "";
    alignment = 0;
    race = sex = number = "";

    // Item fields.
    pObj = 0;
    limit = -1;
    extra = wear = itemtype = "";
    age = 0;
    slevel = 0;
    learned = "";
    ed = false;

    // Weapon fields.
    wclass = wflags = "";
    ave = 0; d1 = 0; d2 = 0;
    random = false;
    tier = 0;
}

/** Populate global searcher parameters and launch obj or weapon search for the given user query. */
bool searcher_parse(struct obj_index_data *pObj, const char *args)
{
    YY_BUFFER_STATE yybuf;
    
    yybuf = yy_scan_string( args );

    p.init();

    p.pObj = pObj;

    p.vnum = pObj->vnum;
    p.level = pObj->level;
    p.limit = pObj->limit;
    
    p.name = russian_case_all_forms(pObj->short_descr) + " " + pObj->name;
    p.ed = (pObj->extra_descr != NULL);
    p.extra = extra_flags.names(pObj->extra_flags);

    bitstring_t wear = pObj->wear_flags;
    REMOVE_BIT(wear, ITEM_TAKE|ITEM_NO_SAC);
    p.wear = wear_flags.names(wear).replaces("wear_", "");

    p.itemtype = item_table.name(pObj->item_type);

    p.material = pObj->material;
    p.fenia = fenia_triggers(pObj->wrapper);

    for (auto &paf: pObj->affected) {
        int m = paf->modifier;

        switch (paf->location) {
        case APPLY_STR: p.str+=m; break;
        case APPLY_INT: p.inta+=m; break;
        case APPLY_WIS: p.wis+=m; break;
        case APPLY_DEX: p.dex+=m; break;
        case APPLY_CON: p.con+=m; break;
        case APPLY_CHA: p.cha+=m; break;
        case APPLY_HIT: p.hp+=m; break;
        case APPLY_MANA: p.mana+=m; break;
        case APPLY_MOVE: p.move+=m; break;
        case APPLY_AC: p.armor+=m; break;
        case APPLY_AGE: p.age+=m; break;
        case APPLY_HITROLL: p.hr+=m; break;
        case APPLY_DAMROLL: p.dr+=m; break;
        case APPLY_SIZE: p.size+=m; break;
        case APPLY_SAVES:         
        case APPLY_SAVING_ROD:    
        case APPLY_SAVING_PETRI:  
        case APPLY_SAVING_BREATH: 
        case APPLY_SAVING_SPELL:  p.saves+=m; break;
        case APPLY_HEAL_GAIN: p.heal_gain+=m; break;
        case APPLY_MANA_GAIN: p.mana_gain+=m; break;
        case APPLY_SPELL_LEVEL:
        case APPLY_LEVEL: 
            p.slevel+=m; 
            break;

        case APPLY_LEARNED:
        case APPLY_NONE:
            if (!paf->global.empty() ){
                p.learned << paf->global.toString() << " ";
            }
            break;
        }

        const FlagTable *table = paf->bitvector.getTable();
        if (table) {    
            DLString *pStr = 0;

            if (table == &detect_flags)
                pStr = &p.det;
            else if (table == &affect_flags)
                pStr = &p.aff;
            else if (table == &imm_flags)
                pStr = &p.imm;
            else if (table == &res_flags)
                pStr = &p.res;
            else if (table == &vuln_flags)
                pStr = &p.vuln;

            if (pStr)
                (*pStr) << table->names(paf->bitvector) << " ";
        }
    }

    if (pObj->item_type == ITEM_ARMOR) {
        p.armor -= pObj->value[0];
    }

    if (pObj->item_type == ITEM_WEAPON) {
        p.wclass = weapon_class.name( pObj->value[0] );
        p.wflags = weapon_type2.names( pObj->value[4] );
        p.d1 = pObj->value[1];
        p.d2 = pObj->value[2];
        p.ave = (1 + p.d2) * p.d1 / 2; 
        p.damage = weapon_flags.name(pObj->value[3]);
        p.random = pObj->properties.count("random") > 0;
        p.tier = get_item_tier(pObj);
    }

    if (searcher_yyparse( ) != 0) {
        yy_delete_buffer( yybuf );
        throw Exception( "Syntax error." );
    }

    yy_delete_buffer( yybuf );
    return p.result;
}	

/** Populate global searcher parameters and launch mob search for the given user query. */
bool searcher_parse(struct mob_index_data *pMob, const char *args)
{
    YY_BUFFER_STATE yybuf;
    
    yybuf = yy_scan_string( args );

    p.init();

    p.name = russian_case_all_forms(pMob->short_descr) + " " + pMob->player_name;
    p.vnum = pMob->vnum;
    p.level = pMob->level;
    p.hr = pMob->hitroll;
    p.dr = pMob->damage[DICE_BONUS];
    p.hp = 0; // TODO discuss
    p.mana = 0; // TODO discuss
    p.move = 0; // TODO discuss
    p.saves = 0; // not set during creation
    p.armor = pMob->ac[0]; // show AC vs pierce
    p.size = pMob->size;
    // TODO: stats computed during creation, discuss
    // heal_gain, mana_gain not set in index data
    
    p.aff = affect_flags.names(pMob->affected_by);
    p.vuln = vuln_flags.names(pMob->vuln_flags);
    p.res = res_flags.names(pMob->res_flags);
    p.imm = imm_flags.names(pMob->imm_flags);
    p.det = detect_flags.names(pMob->detection);
    p.material = pMob->material;
    p.fenia = fenia_triggers(pMob->wrapper);
    p.damage = weapon_flags.name(pMob->dam_type);

    p.pMob = pMob;
    p.form = form_flags.names(pMob->form);
    p.parts = part_flags.names(pMob->parts);
    p.act = act_flags.names(pMob->act);
    p.off = off_flags.names(pMob->off_flags);
    p.group = pMob->group;
    p.spec = pMob->spec_fun.name;
    p.alignment = pMob->alignment; // NO_ALIGN act bit needs to be queried separately.
    p.race = DLString(pMob->race).toLower();
    p.sex = sex_table.name(pMob->sex);
    p.number = pMob->gram_number.toString();

    if (searcher_yyparse( ) != 0) {
        yy_delete_buffer( yybuf );
        throw Exception( "Syntax error." );
    }

    yy_delete_buffer( yybuf );
    return p.result;
}
